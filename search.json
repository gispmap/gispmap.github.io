[{"title":"Hello world","url":"/2024/07/22/Hello-world/","content":"<h2>自我介绍</h2>\n<p>Hello 大家好</p>","categories":["featTest"]},{"title":"CSS布局","url":"/2024/07/21/CSS布局/","content":"CSS布局学习\n一、常规布局\n1.显示方式\n(1) box-sizing属性\nbox-sizing: content-box\ncontent-box 为默认值，标准模式解析。在该模式下，border, padding, height|width 各自独立。\nbox-sizing: border-box\nborder-box 怪异模式解析。该模式下， border和padding 包含在 height|width。\n\n2.溢出处理\n(2) text-overflow 设置文本溢出显示，使用块级元素\nclip: 默认值，当内联内容溢出块容器时，将溢出部分裁剪掉。\nellipsis: 将溢出部分替换为(...)。\n\n二、布局方式\n1.流动布局\n默认布局，流动布局两个特征\n(1) 块状元素，自上而下堆叠分布，宽度默认100%。\n(2) 行内元素，自左而右水平分布，类似文本流，超过一行会换行。\n2.定位布局\nposition: static | absolute | relative | fixed | sticky\nstatic: 该关键字指定元素使用正常的布局行为，即遵循流动布局。此时 top, right, bottom, left, z-index 属性无效。\nabsolute: 绝对定位，元素会移出正常文档流，并不为元素预留空间。top, right, bottom, left, margin 有效。\nrelative: 相对定位， 为元素预留空间。top, right, bottom, left, margin 有效。\nfixed: 元素会被移出正常文档流，并不为元素预留空间。\n       通过指定元素相对于屏幕视口（viewport）的位置来指定元素位置。top, right, bottom, left, margin 有效。\nsticky: 元素根据正常文档流进行定位，然后相对它的最近滚动祖先，基于 top、right、bottom 和 left 的值进行偏移。\n        一个 sticky 元素会“固定”在离它最近的一个拥有“滚动机制”的祖先上（当该祖先的 overflow 是 hidden、scroll、auto 或 overlay 时），即便这个祖先不是最近的真实可滚动祖先。\n        这有效地抑制了任何“sticky”行为\n","categories":["baseTest"]}]